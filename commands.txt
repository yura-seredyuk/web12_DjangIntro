Create 

1. python -m venv env   or python3.8 -m venv env
2. env\Scripts\activate or . env\bin\activate
3. pip install django 
4. django-admin startproject mysite   or django-admin startproject mysite .  - create new project
4.1 if you dont use '.' make 'cd mysite' command 
5. python manage.py migrate - create data_base file
6. python manage.py runserver - run project/ (Ctrl + C  - stop executing)
6.1 python manage.py runserver 127.0.0.1:8001 - if need to change port or ip address
7. python manage.py createsuperuser - create super user for mahaging admin panel and data_base from the admin pahel
8. python manage.py startapp news  - create new application
8.1 add application name into INSTALLED_APPS list in settings.py file
8.2 create models for tables into the models.py in current application
9. python manage.py makemigrations news - create or change tables in data_base
10. python manage.py migrate news - apply chages into data_base

Clone
1. git clone ...
2. create and activate env
2.1 cd to cloned directory
3. pip install -r requirements.txt
4. if data_base is not in the repository, you need to make migration (python manage.py migrate) 


USING (sqlite3) Django ORM QuerySets
python manage.py shell - перейти в режим QuerySets
>>> from news.models import Post - імпорт об'єкта 
>>> Post.objects.all() - виведення усіх постів об'єкта Post
>>> from django.contrib.auth.models import User 
>>> User.objects.all()
>>> me = User.objects.get(username="admin") - отримання одного об'єкта з таблиці БД
>>> Post.objects.create(author=me, title="Title 4", text="Text 4") - створення нового поста
>>> Post.objects.get(title="Title 4")
<Post: admin Title 4>
>>> Post.objects.filter(title="Title 4") 
<QuerySet [<Post: admin Title 4>]>
>>> Post.objects.filter(title__contains="Title")   
<QuerySet [<Post: admin Title1>, <Post: admin Title2>, <Post: admin Title3>, <Post: admin Title 4>]>
>>> Post.objects.filter(title__contains="Title").all()
<QuerySet [<Post: admin Title1>, <Post: admin Title2>, <Post: admin Title3>, <Post: admin Title 4>]>
>>> Post.objects.filter(title__contains="Title").first()
<Post: admin Title1>
>>> Post.objects.filter(author=me) 
<QuerySet [<Post: admin Title1>, <Post: admin Title2>, <Post: admin Title3>, <Post: admin Title 4>]>
>>> post = Post.objects.get(title="Title 4")
>>> post.publish()
>>> from django.utils import timezone
>>> Post.objects.filter(published_date__lte=timezone.now())
<QuerySet [<Post: admin Title1>, <Post: admin Title2>, <Post: admin Title 4>]>

>>> Post.objects.filter(published_date__lte=timezone.now()).order_by("published_date")
<QuerySet [<Post: admin Title1>, <Post: admin Title2>, <Post: admin Title 4>]>
>>> Post.objects.filter(published_date__lte=timezone.now()).order_by("-published_date") 
<QuerySet [<Post: admin Title 4>, <Post: admin Title2>, <Post: admin Title1>]>

>>> exit()